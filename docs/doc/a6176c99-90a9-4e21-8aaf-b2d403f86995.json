{
    "summary": "This code contains classes for PIDController, DifferentialDrive, and RobotController. It calculates control values for a system, computes wheel speeds for linear and angular movements of a robot, and creates a controller for a differential drive robot with specified parameters. The robot checks waypoints and updates position and orientation in a while loop.",
    "details": [
        {
            "comment": "The code defines classes for PIDController, DifferentialDrive, and RobotController. The PIDController class calculates the proportional, integral, and derivative components of an error to control a system. The DifferentialDrive class computes the wheel speeds required for a robot's linear and angular movements. The RobotController class combines these classes to create a controller for a differential drive robot with specified parameters.",
            "location": "\"/media/root/Prima/works/mobile-aloha/docs/src/aloha_scripts/example_waypoint_pid.py\":0-29",
            "content": "import math\nclass PIDController:\n    def __init__(self, kp, ki, kd):\n        self.kp = kp\n        self.ki = ki\n        self.kd = kd\n        self.prev_error = 0\n        self.integral = 0\n    def compute(self, error, dt):\n        self.integral += error * dt\n        derivative = (error - self.prev_error) / dt\n        output = self.kp * error + self.ki * self.integral + self.kd * derivative\n        self.prev_error = error\n        return output\nclass DifferentialDrive:\n    def __init__(self, wheel_distance):\n        self.wheel_distance = wheel_distance\n    def compute_wheel_speeds(self, v, omega):\n        v_left = v - self.wheel_distance / 2 * omega\n        v_right = v + self.wheel_distance / 2 * omega\n        return v_left, v_right\nclass RobotController:\n    def __init__(self, kp, ki, kd, wheel_distance, v_max, position_threshold, yaw_threshold):\n        self.pid = PIDController(kp, ki, kd)\n        self.drive = DifferentialDrive(wheel_distance)\n        self.v_max = v_max\n        self.position_threshold = position_threshold"
        },
        {
            "comment": "Checks if robot has reached current waypoint and its orientation, removes reached waypoints, returns 0 for stopped condition when all waypoints traversed.",
            "location": "\"/media/root/Prima/works/mobile-aloha/docs/src/aloha_scripts/example_waypoint_pid.py\":30-47",
            "content": "        self.yaw_threshold = yaw_threshold\n    def control(self, x_robot, y_robot, theta_current, waypoints, target_yaws):\n        # Check if we reached the current waypoint and its orientation\n        x_target, y_target = waypoints[0]\n        theta_target = target_yaws[0]\n        distance_to_target = math.sqrt((x_target - x_robot)**2 + (y_target - y_robot)**2)\n        if distance_to_target < self.position_threshold and abs(self.normalize_angle(theta_current - theta_target)) < self.yaw_threshold:\n            waypoints.pop(0)  # Remove the reached waypoint\n            target_yaws.pop(0)  # Remove the reached yaw target\n            if not waypoints:  # All waypoints traversed\n                return 0, 0  # Stop the robot\n            x_target, y_target = waypoints[0]\n            theta_target = target_yaws[0]\n        # Calculate desired heading for position\n        theta_desired = math.atan2(y_target - y_robot, x_target - x_robot)\n        # Compute heading errors\n        delta_theta_position = self.normalize_angle(theta_desired - theta_current)"
        },
        {
            "comment": "The function computes wheel speeds based on target distance and yaw angle using a PID controller, normalizes angles, and blends positional and yaw error based on the distance to the target. It also limits linear speed proportional to distance and returns left and right wheel speeds. Example usage provided for a RobotController instance with given parameters.",
            "location": "\"/media/root/Prima/works/mobile-aloha/docs/src/aloha_scripts/example_waypoint_pid.py\":48-70",
            "content": "        delta_theta_yaw = self.normalize_angle(theta_target - theta_current)\n        # Blending between positional and yaw error based on distance to target\n        blend_factor = min(1, distance_to_target / self.position_threshold)\n        delta_theta = blend_factor * delta_theta_position + (1 - blend_factor) * delta_theta_yaw\n        # Get angular speed from PID\n        omega = self.pid.compute(delta_theta, 0.1)  # assuming dt = 0.1 for this example\n        # Decide linear speed\n        v = min(self.v_max, 0.1 * distance_to_target)  # proportionality constant of 0.1\n        # Compute wheel speeds\n        v_left, v_right = self.drive.compute_wheel_speeds(v, omega)\n        return v_left, v_right\n    def normalize_angle(self, angle):\n        while angle > math.pi:\n            angle -= 2 * math.pi\n        while angle < -math.pi:\n            angle += 2 * math.pi\n        return angle\n# Example usage:\nwaypoints = [(1, 1), (2, 2), (3, 1)]\ntarget_yaws = [math.pi/4, 0, -math.pi/4]\ncontroller = RobotController(kp=1.0, ki=0.1, kd=0.05, wheel_distance=0.5, v_max=1.0, position_threshold=0.1, yaw_threshold=0.1)"
        },
        {
            "comment": "This code snippet is part of a robot movement simulation where the robot moves towards waypoints. It uses a while loop to continuously control the robot's left and right wheels (v_left, v_right) based on its current position (x_robot, y_robot), orientation (theta_current), and target waypoints/yaws. The robot's position and orientation are updated with each iteration of the loop.",
            "location": "\"/media/root/Prima/works/mobile-aloha/docs/src/aloha_scripts/example_waypoint_pid.py\":71-75",
            "content": "# Simulating the robot\u2019s movement towards waypoints:\nwhile waypoints:\n    v_left, v_right = controller.control(x_robot=0, y_robot=0, theta_current=0, waypoints=waypoints, target_yaws=target_yaws)\n    print(f'v_left: {v_left}, v_right: {v_right}')\n    # Here, update the robot\u2019s position (x_robot, y_robot) and orientation (theta_current) based on v_left and v_right."
        }
    ]
}