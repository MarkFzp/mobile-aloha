{
    "summary": "This guide installs ROS for the Interbotix XS robot on Ubuntu 22.04, addressing mobile-aloha issues and providing steps for USB debugging, camera configuration, gripper motor management, and teleoperation connection, along with terminal setup, script running, data collection, parameter modification, and visualization/replay of episodes using \"sleep.py\".",
    "details": [
        {
            "comment": "\"This codebase is forked from the ALOHA repo and contains implementation for teleoperation and data collection with Mobile ALOHA hardware. To build ALOHA, follow the Hardware Assembly Tutorial and the quick start guide below. Additionally, install ACT for Mobile ALOHA to train imitation learning algorithms.\"",
            "location": "\"/media/root/Prima/works/mobile-aloha/docs/src/README.md\":0-16",
            "content": "# Mobile ALOHA: Learning Bimanual Mobile Manipulation with Low-Cost Whole-Body Teleoperation\n#### Project Website: https://mobile-aloha.github.io/\nThis codebase is forked from the [ALOHA repo](https://github.com/tonyzhaozh/aloha), and contains implementation for teleoperation and data collection with the Mobile ALOHA hardware.\nTo build ALOHA, follow the [Hardware Assembly Tutorial](https://docs.google.com/document/d/1_3yhWjodSNNYlpxkRCPIlvIAaQ76Nqk2wsqhnEVM6Dc) and the quick start guide below.\nTo train imitation learning algorithms, you would also need to install [ACT for Mobile ALOHA](https://github.com/MarkFzp/act-plus-plus) which is forked from [ACT](https://github.com/tonyzhaozh/act).\n### Repo Structure\n- ``config``: a config for each robot, designating the port they should bind to, more details in quick start guide.\n- ``launch``: a ROS launch file for all 4 cameras and all 4 robots.\n- ``aloha_scripts``: python code for teleop and data collection\n## Quick start guide\n### Software selection -- OS:"
        },
        {
            "comment": "This code is a configuration guide for the Interbotix XS arm robot, specifically for the ROS (Robot Operating System). It provides step-by-step instructions on how to install necessary software packages and make changes to the source code. The instructions include cloning the repository, setting up the environment, and running specific commands to ensure successful building and functioning of the arm. Additionally, it highlights ongoing testing efforts for ROS 2 and Ubuntu 22.04 compatibility.",
            "location": "\"/media/root/Prima/works/mobile-aloha/docs/src/README.md\":18-34",
            "content": "Currently tested and working configurations: \n- :white_check_mark: Ubuntu 18.04 + ROS 1 noetic\n- :white_check_mark: Ubuntu 20.04 + ROS 1 noetic\nOngoing testing (compatibility effort underway):\n- :construction: ROS 2\n- :construction: >= Ubuntu 22.04\n### Software installation - ROS:\n1. Install ROS and interbotix software following https://docs.trossenrobotics.com/interbotix_xsarms_docs/\n2. This will create the directory ``~/interbotix_ws`` which contains ``src``.\n3. git clone this repo inside ``~/interbotix_ws/src``\n4. ``source /opt/ros/noetic/setup.sh && source ~/interbotix_ws/devel/setup.sh``\n5. ``sudo apt-get install ros-noetic-usb-cam && sudo apt-get install ros-noetic-cv-bridge``\n6. run ``catkin_make`` inside ``~/interbotix_ws``, make sure the build is successful\n7. go to ``~/interbotix_ws/src/interbotix_ros_toolboxes/interbotix_xs_toolbox/interbotix_xs_modules/src/interbotix_xs_modules/arm.py``, find function ``publish_positions``.\n   Change ``self.T_sb = mr.FKinSpace(self.robot_des.M, self.robot_des.Slist, self.joint_commands)`` to ``self.T_sb = None``."
        },
        {
            "comment": "This code snippet explains the steps for hardware installation in the mobile-aloha project. It mentions connecting 4 robots to the computer via USB, powering them on, and checking their connection using Dynamixel Wizard software. The wizard allows debugging tasks like rebooting motors, turning torque on/off, and sending commands but should be used with caution to avoid collisions.",
            "location": "\"/media/root/Prima/works/mobile-aloha/docs/src/README.md\":35-48",
            "content": "   This prevents the code from calculating FK at every step which delays teleoperation.\n### Hardware installation:\nThe goal of this section is to run ``roslaunch aloha 4arms_teleop.launch``, which starts\ncommunication with 4 robots and 3 cameras. It should work after finishing the following steps:\nStep 1: Connect 4 robots to the computer via USB, and power on. *Do not use extension cable or usb hub*.\n- To check if the robot is connected, install dynamixel wizard [here](https://emanual.robotis.com/docs/en/software/dynamixel/dynamixel_wizard2/)\n- Dynamixel wizard is a very helpful debugging tool that connects to individual motors of the robot. It allows\nthings such as rebooting the motor (very useful!), torque on/off, and sending commands.\nHowever, it has no knowledge about the kinematics of the robot, so be careful about collisions.\nThe robot *will* collapse if motors are torque off i.e. there is no automatically engaged brakes in joints.\n- Open Dynamixel wizard, go into ``options`` and select:\n  - Protocal 2.0"
        },
        {
            "comment": "This code is providing a method to fix the port binding of robots, as their assigned ports may change over time. It creates symlinks for different robots (master and puppet right and left) by finding the current port they are bound to and assigning them a fixed symbolic port. This ensures consistent identification and access regardless of changing port assignments.",
            "location": "\"/media/root/Prima/works/mobile-aloha/docs/src/README.md\":49-65",
            "content": "  - All ports\n  - 1000000 bps\n  - ID range from 0-10\n- Note: repeat above everytime before you scan.\n- Then hit ``Scan``. There should be 4 devices showing up, each with 9 motors.\n- One issue that arises is the port each robot binds to can change over time, e.g. a robot that\nis initially ``ttyUSB0`` might suddenly become ``ttyUSB5``. To resolve this, we bind each robot to a fixed symlink\nport with the following mapping:\n  - ``ttyDXL_master_right``: right master robot (master: the robot that the operator would be holding)\n  - ``ttyDXL_puppet_right``: right puppet robot (puppet: the robot that performs the task)\n  - ``ttyDXL_master_left``: left master robot\n  - ``ttyDXL_puppet_left``: left puppet robot\n- Take ``ttyDXL_master_right``: right master robot as an example:\n  1. Find the port that the right master robot is currently binding to, e.g. ``ttyUSB0``\n  2. run ``udevadm info --name=/dev/ttyUSB0 --attribute-walk | grep serial`` to obtain the serial number. Use the first one that shows up, the format should look similar to ``FT6S4DSP``."
        },
        {
            "comment": "Create udev rule for right master robot, ensure binding to \"ttyDXL_master_right\", and repeat for other arms. Apply changes, find \"ttyDXL*\" in /dev. In Dynamixel Wizard, set max current limit for gripper motors (XM430-W350) to 300, repeat for both puppet robots. This prevents overloading errors.",
            "location": "\"/media/root/Prima/works/mobile-aloha/docs/src/README.md\":66-80",
            "content": "  3. ``sudo vim /etc/udev/rules.d/99-fixed-interbotix-udev.rules`` and add the following line: \n         SUBSYSTEM==\"tty\", ATTRS{serial}==\"<serial number here>\", ENV{ID_MM_DEVICE_IGNORE}=\"1\", ATTR{device/latency_timer}=\"1\", SYMLINK+=\"ttyDXL_master_right\"\n  4. This will make sure the right master robot is *always* binding to ``ttyDXL_master_right``\n  5. Repeat with the rest of 3 arms.\n- To apply the changes, run ``sudo udevadm control --reload && sudo udevadm trigger``\n- If successful, you should be able to find ``ttyDXL*`` in your ``/dev``\nStep 2: Set max current for gripper motors\n- Open Dynamixel Wizard, and select the wrist motor for puppet arms. The name of it should be ```[ID:009] XM430-W350```\n- Tip: the LED on the base of robot will flash when it is talking to Dynamixel Wizard. This will help determine which robot is selected. \n- Find ``38 Current Limit``, enter ``300``, then hit ``save`` at the bottom.\n- Repeat this for both puppet robots.\n- This limits the max current through gripper motors, to prevent overloading errors."
        },
        {
            "comment": "This code provides instructions to setup 3 cameras and bind them to specific ports consistently. It suggests using a maximum of 2 cameras per USB hub for better latency, creates symlinks for each camera, and guides through obtaining serial numbers, editing udev rules, and applying changes to make the cameras bind to consistent ports.",
            "location": "\"/media/root/Prima/works/mobile-aloha/docs/src/README.md\":83-93",
            "content": "Step 3: Setup 3 cameras\n- You may use usb hub here, but *maximum 2 cameras per hub for reasonable latency*.\n- To make sure all 3 cameras are binding to a consistent port, similar steps are needed.\n- Cameras are by default binding to ``/dev/video{0, 1, 2...}``, while we want to have symlinks ``{CAM_RIGHT_WRIST, CAM_LEFT_WRIST, CAM_HIGH}``\n- Take ``CAM_RIGHT_WRIST`` as an example, and let's say it is now binding to ``/dev/video0``. run ``udevadm info --name=/dev/video0 --attribute-walk | grep serial`` to obtain it's serial. Use the first one that shows up, the format should look similar to ``0E1A2B2F``.\n- Then ``sudo vim /etc/udev/rules.d/99-fixed-interbotix-udev.rules`` and add the following line \n      SUBSYSTEM==\"video4linux\", ATTRS{serial}==\"<serial number here>\", ATTR{index}==\"0\", ATTRS{idProduct}==\"085c\", ATTR{device/latency_timer}=\"1\", SYMLINK+=\"CAM_RIGHT_WRIST\"\n- Repeat this for ``{CAM_LEFT_WRIST, CAM_HIGH}`` in additional to ``CAM_RIGHT_WRIST``\n- To apply the changes, run ``sudo udevadm control --reload && sudo udevadm trigger``"
        },
        {
            "comment": "Installing the AgileX Tracer SDK and enabling gs_usb kernel module for setting up the base, bringing up the CAN device, testing the hardware with can-utils, and launching 4arms_teleop.launch to establish connection between computer and all robot components.",
            "location": "\"/media/root/Prima/works/mobile-aloha/docs/src/README.md\":94-131",
            "content": "- If successful, you should be able to find ``{CAM_RIGHT_WRIST, CAM_LEFT_WRIST, CAM_HIGH}`` in your ``/dev``\nStep 4: Setup the AgileX Tracer base\n- Connect the base to the computer via the stock CANBUS-to-USB cable, and power on.\n- Install SDK from AgileX\n    ```\n    pip3 install pyagxrobots\n    ```\n- Enable gs_usb kernel module\n   ```\n   sudo modprobe gs_usb\n   ```\n- Bring up the CAN device\n   ```\n   sudo ip link set can0 up type can bitrate 500000\n   ```\n- If no error occured in the previous steps, you should be able to see the can device now by using command\n   ```\n   ifconfig -a\n   ```\n- Install and use can-utils to test the hardware\n   ```\n   sudo apt install can-utils\n   ```\n- Testing commands:\n   ```\n   # receiving data from can0\n   candump can0\n   ```\nAt this point, have a new terminal\n    conda deactivate # if conda shows up by default\n    source /opt/ros/noetic/setup.sh && source ~/interbotix_ws/devel/setup.sh\n    roslaunch aloha 4arms_teleop.launch\nIf no error message is showing up, the computer should be successfully connected to all 3 cameras, all 4 robot arms and the robot base."
        },
        {
            "comment": "The code provides instructions for troubleshooting, software installation using Conda, and testing teleoperation. It ensures that the Dynamixel Wizard is disconnected, no app uses the webcam's stream, and installs necessary packages like Torchvision, Pyquaternion, Pyyaml, etc. Before running the commands, it advises placing all 4 robots in sleep positions, opening the master robot's gripper, and launching the teleoperation using ROS terminal with specific commands.",
            "location": "\"/media/root/Prima/works/mobile-aloha/docs/src/README.md\":133-167",
            "content": "#### Trouble shooting\n- Make sure Dynamixel Wizard is disconnected, and no app is using webcam's stream. It will prevent ROS from connecting to\nthese devices.\n### Software installation - Conda:\n    conda create -n aloha python=3.8.10\n    conda activate aloha\n    pip install torchvision\n    pip install torch\n    pip install pyquaternion\n    pip install pyyaml\n    pip install rospkg\n    pip install pexpect\n    pip install mujoco\n    pip install dm_control\n    pip install opencv-python\n    pip install matplotlib\n    pip install einops\n    pip install packaging\n    pip install h5py\n    pip install tqdm\n    pip install wandb\n### Testing teleoperation\n**Notice**: Before running the commands below, be sure to place all 4 robots in their sleep positions, and open master robot's gripper. \nAll robots will rise to a height that is easy for teleoperation.\n    # ROS terminal\n    conda deactivate\n    source /opt/ros/noetic/setup.sh && source ~/interbotix_ws/devel/setup.sh\n    roslaunch aloha 4arms_teleop.launch\n    # Right hand terminal"
        },
        {
            "comment": "The code provides instructions for setting up a terminal, running teleoperation scripts, collecting data using record_episodes.py, modifying parameters in constants.py, visualizing episodes with visualize_episodes.py, and replaying episodes with real robot using replay_episodes.py. It also mentions a command to lower 4 robots when needed.",
            "location": "\"/media/root/Prima/works/mobile-aloha/docs/src/README.md\":168-203",
            "content": "    conda activate aloha\n    cd ~/interbotix_ws/src/aloha/aloha_scripts\n    python3 one_side_teleop.py right\n    # Left hand terminal\n    conda activate aloha\n    cd ~/interbotix_ws/src/aloha/aloha_scripts\n    python3 one_side_teleop.py left\nThe teleoperation will start when the master side gripper is closed.\n## Example Usages\nTo set up a new terminal, run:\n    conda activate aloha\n    cd ~/interbotix_ws/src/aloha/aloha_scripts\nThe ``one_side_teleop.py`` we ran is for testing teleoperation and has no data collection. To collect data for an episode, run:\n    python3 record_episodes.py --dataset_dir <data save dir> --episode_idx 0\nThis will store a hdf5 file at ``<data save dir>``.\nTo change episode length and other params, edit ``constants.py`` directly.\nTo visualize the episode collected, run:\n    python3 visualize_episodes.py --dataset_dir <data save dir> --episode_idx 0\nTo replay the episode collected with real robot, run:\n    python3 replay_episodes.py --dataset_dir <data save dir> --episode_idx 0\nTo lower 4 robots before e.g. cutting off power, run:"
        },
        {
            "comment": "The code above is running a Python script named \"sleep.py\" on a system with Python 3 installed. This could potentially pause the execution for a certain amount of time, depending on how the \"sleep.py\" script is implemented.",
            "location": "\"/media/root/Prima/works/mobile-aloha/docs/src/README.md\":205-205",
            "content": "    python3 sleep.py"
        }
    ]
}